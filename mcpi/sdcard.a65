SDCARD_A65_SELF: .INCLUDE "mcpi.i65"

.ZEROPAGE

sd_card_sector:	.RES 4

.CODE


; ********************************
; Read sector
; Input: sector NUMBER (regardless of SDHC or not!) is in sd_card_sector
; Output: 
;		Carry is clear: OK, sector is read
;		Carry is set: some error!
; Registers destroyed: NONE!!
; ***************************
.PROC	sdcard_read_selected_sector
	PHA
	LDA	IO_SD_STATUS
	AND	#10
	BNE	sdhc	; if SDHC, no need to convert, as it uses sector addressing already (?)
	; Not an SDHC card
	LDA	sd_card_sector+3
	BNE	error			; non-SDHC card cannot be this large, would overflow during the conversion
	LDA	sd_card_sector
	ASL	A
	STA	IO_SD_SECTOR_ADDRESS+1
	LDA	sd_card_sector+1
	ROL	A
	STA	IO_SD_SECTOR_ADDRESS+2
	LDA	sd_card_sector+2
	ROL	A
	BCS	error
	STA	IO_SD_SECTOR_ADDRESS+3
	LDA	#0
	STA	IO_SD_SECTOR_ADDRESS
	JMP	no_sdhc
sdhc:
	LDA	sd_card_sector
	STA	IO_SD_SECTOR_ADDRESS
	LDA	sd_card_sector+1
	STA	IO_SD_SECTOR_ADDRESS+1
	LDA	sd_card_sector+2
	STA	IO_SD_SECTOR_ADDRESS+2
	LDA	sd_card_sector+3
	STA	IO_SD_SECTOR_ADDRESS+3
no_sdhc:
	LDA	#2	; read sector command
	STA	IO_SD_CMD
	; Wait while card is busy and check error
wait_when_busy:
	LDA	IO_SD_STATUS
	AND	#$60
	BNE	error
	LDA	IO_SD_STATUS
	AND	#3
	BNE	wait_when_busy
wait_for_read_data:
	LDA	IO_SD_BYTES_READ		; TODO: in KS, there is a question, why this should be read!
	LDA	IO_SD_BYTES_READ+1
	CMP	#2
	BNE	wait_for_read_data
	PLA
	CLC
	RTS
error:
	PLA
	SEC
	RTS
.ENDPROC



; *********************
; Probe SD-card size (this is an ugly probing scheme with binary search, which is kinda easy in case of a binary number anyway)
; Input: -
; Output: sd_card_sector contains the last valid sector number (to be sure there is card at all, maybe worth to check then, if the card has the minimum detected size which makes sense)
; Registers destroyed: MAYBE ALL
; ********************* 
.PROC	sdcard_probe_size
	LDA	#0
	STA	z:sd_card_sector
	STA	z:sd_card_sector+1
	STA	z:sd_card_sector+2
	STA	z:sd_card_sector+3
	LDX	#sd_card_sector + 3
search_outer:
	LDA	#$80			; A holds a bit mask for '1' as the current tested bit
search:
	STX	selfmod1
	selfmod1 = * + 1
	TSB	z:$80
	JSR	sdcard_read_selected_sector
	BCC	no_flip_back
	STX	selfmod2
	selfmod2 = * + 1
	TRB	z:$80
no_flip_back:
	CLC
	ROR	A
	BCC	search
	DEX
	CPX	#sd_card_sector - 1
	BNE	search_outer
	RTS
.ENDPROC
