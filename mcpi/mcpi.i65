; ----------------------------------------------------------------------------
;
; MCPI - Mega65 Command Processor Interface
;
; Copyright (C)2017 LGB (Gábor Lénárt) <lgblgblgb@gmail.com>
;
; ----------------------------------------------------------------------------
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;
; ----------------------------------------------------------------------------

.SETCPU "4510"		; This requires quite new CA65 (of the CC65 suite) version, maybe only the git version can do this ...


; Maybe there is more sane method to do this in CA65 ...
; Anyway, the theory is the following:
; Every source define a label (not used for anything other)
; something like SOURCENAME_A65_SELF before including this file.
; So in case of "self-include" "PUBLIC" and "PUBLICZP" will _EXPORT_
; a symbol, while in other cases it will _IMPORT_.
; Then (see below these macros) there are the list for all sources
; export/import symbols we need. The reason we need a label with this
; SELF thing, since according to my tests at least, .IFDEF etc can only
; expect label, and not .DEFINE's :(

.MACRO	PUBLIC selfcond, label
	.IFDEF selfcond
		.EXPORT label
	.ELSE
		.IMPORT label
	.ENDIF
.ENDMACRO
.MACRO	PUBLICZP selfcond, label
	.IFDEF selfcond
		.EXPORTZP label
	.ELSE
		.IMPORTZP label
	.ENDIF
.ENDMACRO

; *** console.a65
PUBLIC	CONSOLE_A65_SELF, console_init
PUBLIC	CONSOLE_A65_SELF, clear_screen
PUBLIC	CONSOLE_A65_SELF, write_inline_string
PUBLIC	CONSOLE_A65_SELF, write_hex_byte_at_zp
PUBLIC	CONSOLE_A65_SELF, write_hex_byte
PUBLIC	CONSOLE_A65_SELF, write_hex_nib
PUBLIC	CONSOLE_A65_SELF, write_char
PUBLIC	CONSOLE_A65_SELF, write_crlf
PUBLIC	CONSOLE_A65_SELF, write_space
PUBLIC	CONSOLE_A65_SELF, conin_check_status
PUBLIC	CONSOLE_A65_SELF, conin_get_with_wait
; *** sdcard.a65
PUBLIC	SDCARD_A65_SELF, sdcard_probe_size
PUBLIC	SDCARD_A65_SELF, sdcard_read_selected_sector
PUBLIC	SDCARD_A65_SELF, sdcard_select_zero_sector
PUBLIC	SDCARD_A65_SELF, sdcard_select_next_sector
PUBLICZP	SDCARD_A65_SELF, sd_card_sector
; *** main.a65
PUBLIC	MAIN_A65_SELF, main
; *** shell.a65
PUBLIC	SHELL_A65_SELF, command_processor


IO_SD_SECTOR_ADDRESS	= $D681
IO_SD_BYTES_READ	= $D688
IO_SD_STATUS		= $D680
IO_SD_CMD		= $D680

.MACRO  WRISTR  str
	JSR	write_inline_string
	.BYTE	str
	.BYTE	0
.ENDMACRO

.MACRO  HYPERDOS
	STA	$D640	; DOS hypervisor trap on write (I/O mode for M65 should be enabled for this)
	NOP		; I am not really understand this, but it seems there can (?) be situation when an opcode is not executed after a hypervisor trap?!
.ENDMACRO

; Mega-65 32 bit linear ops

.MACRO	LDA32Z	zploc
	NOP
	LDA	(zploc),Z
.ENDMACRO
.MACRO	STA32Z	zploc
	NOP
	STA	(zploc),Z
.ENDMACRO
.MACRO	ORA32Z	zploc
	NOP
	ORA	(zploc),Z
.ENDMACRO
.MACRO	AND32Z	zploc
	NOP
	AND	(zploc),Z
.ENDMACRO
.MACRO	EOR32Z	zploc
	NOP
	EOR	(zploc),Z
.ENDMACRO
.MACRO	ADC32Z	zploc
	NOP
	ADC	(zploc),Z
.ENDMACRO
.MACRO	SBC32Z	zploc
	NOP
	SBC	(zploc),Z
.ENDMACRO

.MACRO __DMA_COPY_OP__		sourcebank, source, targetbank, target, length, upward, chained
.ENDMACRO
.MACRO __DMA_FILL_OP__		targetbank, target, filler, length, upward, chained
.ENDMACRO
.MACRO DMA_COPY_OP_CHAINED	sourcebank, source, targetbank, target, length, upward
.ENDMACRO
.MACRO DMA_COPY_OP_LAST		sourcebank, source, targetbank, target, length, upward
.ENDMACRO
.MACRO DMA_FILL_OP_CHAINED	targetbank, target, filler, length, upward
.ENDMACRO
.MACRO DMA_FILL_OP_LAST		targetbank, target, filler, length, upward
.ENDMACRO
