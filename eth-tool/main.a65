; ** A work-in-progess Mega-65 (Commodore-65 clone origins) emulator
; ** Part of the Xemu project, please visit: https://github.com/lgblgblgb/xemu
; ** Copyright (C)2018 LGB (Gábor Lénárt) <lgblgblgb@gmail.com>
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

.INCLUDE	"common.i65"

.SEGMENT	"BASICSTUB"

.SCOPE
	.WORD	:+
:	.WORD	:+, 2018
	.BYTE	$9E
	.BYTE	.LOBYTE(start / 1000 + '0')
	.BYTE	.LOBYTE(start / 100 .MOD 10 + '0')
	.BYTE	.LOBYTE(start / 10 .MOD 10 + '0')
	.BYTE	.LOBYTE(start .MOD 10 + '0')
	.BYTE	0
:	.WORD	0
.ENDSCOPE

.SEGMENT "INIT"

; START of our program
start:
	JSR	$E544		; clear screen
	SEI			; disable interrupts

	LDA	#65
	STA	Z:0

	; M65 I/O mode
	LDA	#$47
	STA	$D02F
	LDA	#$53
	STA	$D02F

	; "Nice" header ....
	LDX	#screen_header_length-1
@screen_header:
	LDA	screen_header,X
	STA	$400,X
	DEX
	BPL	@screen_header

	; Set mapping
	lda #$ff		; set Mbyte for low
        ldx #$0f	; M65 specific stuff
        ldy #$00
        ldz #$00
	MAP
	EOM

	LDA	#$80
	LDX	#$8D
	LDY	#0
	LDZ	#0
	MAP
	EOM

	; I've tried severel setup things here, with various settings to turn filters on/off, etc
	LDA	$D6E5
	AND	#$FE
	ORA	#16+32
	STA	$D6E5


	STA	$D610	; we want to delete hw kbd queue

	JSR	eth_ack
	JMP	main_loop	; do not remove this, another segment follows, maybe not the next address ...


.CODE

	; **** START OF OUR MAIN LOOP ****

main_loop:
	; Waiting for packet to be received, actually do the polling here
	; Actually, there are so many things here no as debug to show on screen
	; The important part can be realized with this _only_:
	;   LDA #$20
	; @wait_rx:
	;   BIT $D6E1
	;   BNE @wait_rx
	;   JSR eth_ack
	;   ... etc ...
@wait_rx:
	LDA	$D6E1
	; Called in a waiting for receiving busy-loop
	; IMPORTANT NOTE: this function *MUST* preseve value of reg A!
	; If you don't need this functionality, simply remove this JSR,
	; though in later version it may handle timeouts of retransmission
	; etc functions as well, when it shouldn't be left out too much ...
	JSR	rx_callback_on_waiting
	; check the RX status bit, if we have something
	AND	#$20
	BEQ	@wait_rx

; *** So we have something received.

	; ACK RX, move RX buffer to CPU mapped, also allow eth ctrl to receive a new one "meanwhile" (if available)
	JSR	eth_ack
	; This callback is called when something is received, note, that parsing the frame itself is not handled in this
	; callback though, it's mostly for purposes to update the screen state and so on
	JSR	rx_callback_on_reciving
	
	; If first byte of ethertype is not 8, then it's not Ethernet-II frame, or anyway an Ethernet-II frame with payload what we don't support
	LDA	RX_ETHERTYPE
	CMP	#$08
	BNE	main_loop

	LDA	RX_ETHERTYPE+1
	BEQ	proto_ipv4	; 0? then it should be an IPv4 stuff, with some payload (UDP/ICMP/TCP)
	CMP	#$06
	BNE	main_loop	; not ARP (and neither IPv4), ignore

	; So, must be ARP at this point!

	JSR	arp_handle	; in ethernet.a65
	JMP	main_loop	; now, back to the business

proto_ipv4:

	; For IPv4 we only accept IP packets with our IP as target: that also rules out multicast IP, boadcast whatever
	; Again, no check on MAC level, just on IP.
	; NOTE: we must move this away if we want to implement DHCP later!!
	; *** WE DO NOT CHECK IF TARGET IP IS US ***
	; So the decoded functions should have.
	; Reason: some protocol we want to handle use IPv4 bcast addr for example, what would be ruled out here ...

	; NOTE: removed, since we have to process bcast IP as well, for DHCP. So the functions below should check the situation at there own!
	;LDX	#16		; offset of target IP in the IP header
	;JSR	is_our_ip
	;BNE	main_loop

	LDA	RX_ETH_PAYLOAD
	CMP	#$45		; IPv4, and std IP header size? (Ugly: we ignore packets with options included in the header! ie, IHL field should be '5')
	BNE	main_loop
	LDA	RX_ETH_PAYLOAD+6	; flags and a piece of fragment offset field
	AND	#$FF-$40		; ... only bits other than DF (don't fragment) field, the result must be zero to be supported by us!
	BNE	main_loop
	LDA	RX_ETH_PAYLOAD+7	; fragment offset, other half
	BNE	main_loop		; if non-zero, it's maybe a fragmented IP datagram, what we're not so much interested in yet.

	; Check the protocol, ie the payload of the IP packet, we are interested in UDP or ICMP only.
	LDA	RX_ETH_PAYLOAD+9
	CMP	#17		; UDP?
	BEQ	proto_udp	; if it's UDP, go to the handler
	CMP	#1		; ICMP?
	BNE	main_loop	; no ICMP, and it was no UDP either ...

	; So, must be ICMP at the point! Note: we only support icmp echo request and reply for that (aka ping), no other ICMP support right now

	LDX	#16
	JSR	is_our_ip
	BNE	main_loop	; we don't want to answer to bcast pings too much at the point ...
	JSR	icmp_handle	; in icmp_ping.a65
	JMP	main_loop

proto_udp:

	; First, check for DHCP answers from DHCP servers.
	; We want to do this first, as it can use bcast IP addr etc
	; which will be ruled out later to be safe!

	; DHCP offer and ACK from DHCP server: source port=67; destination port=68
	; 	this uses IPs like 0.0.0.0 and 255.255.255.255
	;	we currently does not check that and relies on IPs used though just ports


	LDA	RX_ETH_PAYLOAD+20+3	; A=LOW byte of target port
	LDX	RX_ETH_PAYLOAD+20+2	; X=HIGH byte of target port
	BNE	@hi_dest_port	; dst port > 0xFF
	CMP	#68
	BEQ	@maybe_dhcp	; if dst port == 68 (still, source port is something we want to check later)
	CMP	#69
	BEQ	@tftp_initial	; if dst port == 69

	JMP	main_loop	; we don't know what it can be, simply skip it (below < 0x100 ports, we only expect for 69 and 68)

@maybe_dhcp:			; maybe DHCP, but to have a bit extra care (maybe too much?) we check for the source port as well

	LDA	RX_ETH_PAYLOAD+20
	BNE	main_loop
	LDA	RX_ETH_PAYLOAD+21
	CMP	#67
	BNE	main_loop

	; YESSS, DHCP!
	JSR	dhcp_handle_answer
	JMP	main_loop

@hi_dest_port:			; No we have left with connecting to UDP ports >= 0x100. Basically we have our monitor and the TFP server for DATA/ACK

	CMP	#.LOBYTE(MONITOR_PORT)
	BNE	@maybe_tftp
	CPX	#.HIBYTE(MONITOR_PORT)
	BNE	@maybe_tftp

	; It must be our monitor port! But first test if it's really targeting our IP (no bcast etc)
	LDX	#16
	JSR	is_our_ip
	LBNE	main_loop
	JSR	monitor_handle
	JMP	main_loop

	; Only possibility left that is TFTP ACK/DATA packets with arbitary ports on "TIDs" (tftp_server_data_port)
	; Note, that at least tftp_server_data_port+1 should be hold zero if no transfer, so it won't be ever taken
	; the control, as this code fragment has the control only in case of > 0xFF ports (and we choose server TID
	; always from the upper port region)

@maybe_tftp:

	CPX	tftp_server_data_port+1
	LBNE	main_loop
	CMP	tftp_server_data_port
	LBNE	main_loop
	LDX	#16
	JSR	is_our_ip
	LBNE	main_loop
	JSR	tftp_handle_in_transfer_packets	; though still, source port must be checked by this func though ... (but it's more a TFTP protocol level stuff)
	JMP	main_loop

@tftp_initial:

	LDX	#16
	JSR	is_our_ip
	LBNE	main_loop
	JSR	tftp_handle_command
	JMP	main_loop





; *** this routine must preserve value of reg A! ***
.PROC	rx_callback_on_waiting
	PHA
	LDX	#117
	JSR	show_hex_byte	; just to show the register value on the screen ...
	; Check keyboard!
	LDA	$D610
	BEQ	no_key
	STA	$D610
	PHA
	LDX	#114
	JSR	show_hex_byte
	PLA
	JSR	key_press
no_key:
	JSR	update_status
	PLA
	RTS
.ENDPROC


.PROC	rx_callback_on_reciving
	; Some counter, just as some indication for the user how many frames has been received already (any frame, even skipped ones ...)
	LDX	#5
	JSR	ugly_counter
	; Just for fun, print the MAC addr of the source and target + ethertype, so user can seen the last received frame's main properties
	LDX	#80
	LDY	#0
show_src_mac:
	LDA	RX_ETH_MAC_SRC,Y
	JSR	show_hex_byte
	INY
	CPY	#6
	BNE	show_src_mac
	INX
	LDY	#0
show_dst_mac:
	LDA	RX_ETH_MAC_DST,Y
	JSR	show_hex_byte
	INY
	CPY	#6
	BNE	show_dst_mac
	INX
	LDA	RX_ETHERTYPE	; and show ethertype too ...
	JSR	show_hex_byte
	LDA	RX_ETHERTYPE+1
	JMP	show_hex_byte
.ENDPROC


key_press:
	CMP	#'d'
	BNE	@ret
	; Send DHCP discovery message

	JSR	dhcp_send_discovery
@ret:
	RTS

